/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.avro.notification.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class notification_event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4548589182765582244L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"notification_event\",\"namespace\":\"com.avro.notification.event\",\"fields\":[{\"name\":\"notification_event_name\",\"type\":\"string\"},{\"name\":\"notification_event_time\",\"type\":\"string\"},{\"name\":\"notification_description\",\"type\":\"string\"},{\"name\":\"account_name\",\"type\":\"string\"},{\"name\":\"account_create_time\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<notification_event> ENCODER =
      new BinaryMessageEncoder<notification_event>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<notification_event> DECODER =
      new BinaryMessageDecoder<notification_event>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<notification_event> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<notification_event> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<notification_event> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<notification_event>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this notification_event to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a notification_event from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a notification_event instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static notification_event fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence notification_event_name;
  @Deprecated public java.lang.CharSequence notification_event_time;
  @Deprecated public java.lang.CharSequence notification_description;
  @Deprecated public java.lang.CharSequence account_name;
  @Deprecated public java.lang.CharSequence account_create_time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public notification_event() {}

  /**
   * All-args constructor.
   * @param notification_event_name The new value for notification_event_name
   * @param notification_event_time The new value for notification_event_time
   * @param notification_description The new value for notification_description
   * @param account_name The new value for account_name
   * @param account_create_time The new value for account_create_time
   */
  public notification_event(java.lang.CharSequence notification_event_name, java.lang.CharSequence notification_event_time, java.lang.CharSequence notification_description, java.lang.CharSequence account_name, java.lang.CharSequence account_create_time) {
    this.notification_event_name = notification_event_name;
    this.notification_event_time = notification_event_time;
    this.notification_description = notification_description;
    this.account_name = account_name;
    this.account_create_time = account_create_time;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return notification_event_name;
    case 1: return notification_event_time;
    case 2: return notification_description;
    case 3: return account_name;
    case 4: return account_create_time;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: notification_event_name = (java.lang.CharSequence)value$; break;
    case 1: notification_event_time = (java.lang.CharSequence)value$; break;
    case 2: notification_description = (java.lang.CharSequence)value$; break;
    case 3: account_name = (java.lang.CharSequence)value$; break;
    case 4: account_create_time = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'notification_event_name' field.
   * @return The value of the 'notification_event_name' field.
   */
  public java.lang.CharSequence getNotificationEventName() {
    return notification_event_name;
  }


  /**
   * Sets the value of the 'notification_event_name' field.
   * @param value the value to set.
   */
  public void setNotificationEventName(java.lang.CharSequence value) {
    this.notification_event_name = value;
  }

  /**
   * Gets the value of the 'notification_event_time' field.
   * @return The value of the 'notification_event_time' field.
   */
  public java.lang.CharSequence getNotificationEventTime() {
    return notification_event_time;
  }


  /**
   * Sets the value of the 'notification_event_time' field.
   * @param value the value to set.
   */
  public void setNotificationEventTime(java.lang.CharSequence value) {
    this.notification_event_time = value;
  }

  /**
   * Gets the value of the 'notification_description' field.
   * @return The value of the 'notification_description' field.
   */
  public java.lang.CharSequence getNotificationDescription() {
    return notification_description;
  }


  /**
   * Sets the value of the 'notification_description' field.
   * @param value the value to set.
   */
  public void setNotificationDescription(java.lang.CharSequence value) {
    this.notification_description = value;
  }

  /**
   * Gets the value of the 'account_name' field.
   * @return The value of the 'account_name' field.
   */
  public java.lang.CharSequence getAccountName() {
    return account_name;
  }


  /**
   * Sets the value of the 'account_name' field.
   * @param value the value to set.
   */
  public void setAccountName(java.lang.CharSequence value) {
    this.account_name = value;
  }

  /**
   * Gets the value of the 'account_create_time' field.
   * @return The value of the 'account_create_time' field.
   */
  public java.lang.CharSequence getAccountCreateTime() {
    return account_create_time;
  }


  /**
   * Sets the value of the 'account_create_time' field.
   * @param value the value to set.
   */
  public void setAccountCreateTime(java.lang.CharSequence value) {
    this.account_create_time = value;
  }

  /**
   * Creates a new notification_event RecordBuilder.
   * @return A new notification_event RecordBuilder
   */
  public static com.avro.notification.event.notification_event.Builder newBuilder() {
    return new com.avro.notification.event.notification_event.Builder();
  }

  /**
   * Creates a new notification_event RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new notification_event RecordBuilder
   */
  public static com.avro.notification.event.notification_event.Builder newBuilder(com.avro.notification.event.notification_event.Builder other) {
    if (other == null) {
      return new com.avro.notification.event.notification_event.Builder();
    } else {
      return new com.avro.notification.event.notification_event.Builder(other);
    }
  }

  /**
   * Creates a new notification_event RecordBuilder by copying an existing notification_event instance.
   * @param other The existing instance to copy.
   * @return A new notification_event RecordBuilder
   */
  public static com.avro.notification.event.notification_event.Builder newBuilder(com.avro.notification.event.notification_event other) {
    if (other == null) {
      return new com.avro.notification.event.notification_event.Builder();
    } else {
      return new com.avro.notification.event.notification_event.Builder(other);
    }
  }

  /**
   * RecordBuilder for notification_event instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<notification_event>
    implements org.apache.avro.data.RecordBuilder<notification_event> {

    private java.lang.CharSequence notification_event_name;
    private java.lang.CharSequence notification_event_time;
    private java.lang.CharSequence notification_description;
    private java.lang.CharSequence account_name;
    private java.lang.CharSequence account_create_time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.avro.notification.event.notification_event.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.notification_event_name)) {
        this.notification_event_name = data().deepCopy(fields()[0].schema(), other.notification_event_name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.notification_event_time)) {
        this.notification_event_time = data().deepCopy(fields()[1].schema(), other.notification_event_time);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.notification_description)) {
        this.notification_description = data().deepCopy(fields()[2].schema(), other.notification_description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.account_name)) {
        this.account_name = data().deepCopy(fields()[3].schema(), other.account_name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.account_create_time)) {
        this.account_create_time = data().deepCopy(fields()[4].schema(), other.account_create_time);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing notification_event instance
     * @param other The existing instance to copy.
     */
    private Builder(com.avro.notification.event.notification_event other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.notification_event_name)) {
        this.notification_event_name = data().deepCopy(fields()[0].schema(), other.notification_event_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.notification_event_time)) {
        this.notification_event_time = data().deepCopy(fields()[1].schema(), other.notification_event_time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.notification_description)) {
        this.notification_description = data().deepCopy(fields()[2].schema(), other.notification_description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.account_name)) {
        this.account_name = data().deepCopy(fields()[3].schema(), other.account_name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.account_create_time)) {
        this.account_create_time = data().deepCopy(fields()[4].schema(), other.account_create_time);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'notification_event_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getNotificationEventName() {
      return notification_event_name;
    }


    /**
      * Sets the value of the 'notification_event_name' field.
      * @param value The value of 'notification_event_name'.
      * @return This builder.
      */
    public com.avro.notification.event.notification_event.Builder setNotificationEventName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.notification_event_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'notification_event_name' field has been set.
      * @return True if the 'notification_event_name' field has been set, false otherwise.
      */
    public boolean hasNotificationEventName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'notification_event_name' field.
      * @return This builder.
      */
    public com.avro.notification.event.notification_event.Builder clearNotificationEventName() {
      notification_event_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'notification_event_time' field.
      * @return The value.
      */
    public java.lang.CharSequence getNotificationEventTime() {
      return notification_event_time;
    }


    /**
      * Sets the value of the 'notification_event_time' field.
      * @param value The value of 'notification_event_time'.
      * @return This builder.
      */
    public com.avro.notification.event.notification_event.Builder setNotificationEventTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.notification_event_time = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'notification_event_time' field has been set.
      * @return True if the 'notification_event_time' field has been set, false otherwise.
      */
    public boolean hasNotificationEventTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'notification_event_time' field.
      * @return This builder.
      */
    public com.avro.notification.event.notification_event.Builder clearNotificationEventTime() {
      notification_event_time = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'notification_description' field.
      * @return The value.
      */
    public java.lang.CharSequence getNotificationDescription() {
      return notification_description;
    }


    /**
      * Sets the value of the 'notification_description' field.
      * @param value The value of 'notification_description'.
      * @return This builder.
      */
    public com.avro.notification.event.notification_event.Builder setNotificationDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.notification_description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'notification_description' field has been set.
      * @return True if the 'notification_description' field has been set, false otherwise.
      */
    public boolean hasNotificationDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'notification_description' field.
      * @return This builder.
      */
    public com.avro.notification.event.notification_event.Builder clearNotificationDescription() {
      notification_description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'account_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccountName() {
      return account_name;
    }


    /**
      * Sets the value of the 'account_name' field.
      * @param value The value of 'account_name'.
      * @return This builder.
      */
    public com.avro.notification.event.notification_event.Builder setAccountName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.account_name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'account_name' field has been set.
      * @return True if the 'account_name' field has been set, false otherwise.
      */
    public boolean hasAccountName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'account_name' field.
      * @return This builder.
      */
    public com.avro.notification.event.notification_event.Builder clearAccountName() {
      account_name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'account_create_time' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccountCreateTime() {
      return account_create_time;
    }


    /**
      * Sets the value of the 'account_create_time' field.
      * @param value The value of 'account_create_time'.
      * @return This builder.
      */
    public com.avro.notification.event.notification_event.Builder setAccountCreateTime(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.account_create_time = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'account_create_time' field has been set.
      * @return True if the 'account_create_time' field has been set, false otherwise.
      */
    public boolean hasAccountCreateTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'account_create_time' field.
      * @return This builder.
      */
    public com.avro.notification.event.notification_event.Builder clearAccountCreateTime() {
      account_create_time = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public notification_event build() {
      try {
        notification_event record = new notification_event();
        record.notification_event_name = fieldSetFlags()[0] ? this.notification_event_name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.notification_event_time = fieldSetFlags()[1] ? this.notification_event_time : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.notification_description = fieldSetFlags()[2] ? this.notification_description : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.account_name = fieldSetFlags()[3] ? this.account_name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.account_create_time = fieldSetFlags()[4] ? this.account_create_time : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<notification_event>
    WRITER$ = (org.apache.avro.io.DatumWriter<notification_event>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<notification_event>
    READER$ = (org.apache.avro.io.DatumReader<notification_event>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.notification_event_name);

    out.writeString(this.notification_event_time);

    out.writeString(this.notification_description);

    out.writeString(this.account_name);

    out.writeString(this.account_create_time);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.notification_event_name = in.readString(this.notification_event_name instanceof Utf8 ? (Utf8)this.notification_event_name : null);

      this.notification_event_time = in.readString(this.notification_event_time instanceof Utf8 ? (Utf8)this.notification_event_time : null);

      this.notification_description = in.readString(this.notification_description instanceof Utf8 ? (Utf8)this.notification_description : null);

      this.account_name = in.readString(this.account_name instanceof Utf8 ? (Utf8)this.account_name : null);

      this.account_create_time = in.readString(this.account_create_time instanceof Utf8 ? (Utf8)this.account_create_time : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.notification_event_name = in.readString(this.notification_event_name instanceof Utf8 ? (Utf8)this.notification_event_name : null);
          break;

        case 1:
          this.notification_event_time = in.readString(this.notification_event_time instanceof Utf8 ? (Utf8)this.notification_event_time : null);
          break;

        case 2:
          this.notification_description = in.readString(this.notification_description instanceof Utf8 ? (Utf8)this.notification_description : null);
          break;

        case 3:
          this.account_name = in.readString(this.account_name instanceof Utf8 ? (Utf8)this.account_name : null);
          break;

        case 4:
          this.account_create_time = in.readString(this.account_create_time instanceof Utf8 ? (Utf8)this.account_create_time : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










